@page "/fetchdata"

@using BlazorExample.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>
<hr class="mb-5" />
<h3>Click on row to edit it</h3>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="ToggleModal">Add</button>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr @onclick="@(() => Edit(forecast, forecasts.ToList().IndexOf(forecast)))">
                    <td>@forecast.Date.ToString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    //-----------modal
    <div class="@modalClass" tabindex="-1" style="display: @displayMode;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(modalType?"Edit forecast":"Add new forecast")</h5>
                    <button class="close" @onclick="ToggleModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row mb-1">
                            <div class="col-md-4">
                                <label>Date</label>
                            </div>
                            <div class="col-md-4">

                                <input type="text" @bind="date" />
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-md-4">

                                <label>TempC</label>
                            </div>
                            <div class="col-md-4">

                                <input type="text" @bind="tempC" />
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-md-4">

                                <label>TempF</label>
                            </div>
                            <div class="col-md-4">

                                <input type="text" @bind="tempF" />
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-md-4">

                                <label>Summary</label>
                            </div>
                            <div class="col-md-4">

                                <input type="text" @bind="summ" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Close</button>
                    <button class="btn btn-primary" @onclick="SaveChanges">Save changes</button>
                    <RadzenButton Visible="modalType" class="btn btn-danger" @onclick="Delete" >Delete</RadzenButton>
                </div>
            </div>
        </div>
    </div>
    //-----------

    <RadzenChart>
        @*<RadzenLegend Title="Temperature Changing"/>*@
        <RadzenLineSeries Data="@forecasts" CategoryProperty="Date" Title="Temperature" LineType="LineType.Dashed" ValueProperty="TemperatureC">
            <RadzenMarkers MarkerType="MarkerType.Diamond" />
        </RadzenLineSeries>
    </RadzenChart>
}

@code
{
    //modalType: 0-add 1-edit
    bool modalType = false;

    bool open = false;
    string modalClass => open ? "modal fade show" : "modal fade";
    string displayMode => open ? "block" : "none";
    string mode = "add";

    List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    [CascadingParameter] public IModalService Modal { get; set; }

    int index = -1;
    string date;
    string tempC;
    string tempF;
    string summ;


    private void Delete()
    {
        forecasts.Remove(forecasts.FirstOrDefault(x => x.Date.ToShortDateString() == date && x.Summary == summ && x.TemperatureC == int.Parse(tempC)));
        ToggleModal();
    }

    private void SaveChanges()
    {
        try
        {
            forecasts.RemoveAt(index);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        forecasts.Add(new WeatherForecast()
        {
            Date = DateTime.Parse(date),
            Summary = summ,
            TemperatureC = int.Parse(tempC)
        });
        ToggleModal();
        modalType = false;

    }

    async Task Edit(WeatherForecast forecast, int row)
    {
        modalType = true;
        date = forecast.Date.ToShortDateString();
        tempC = forecast.TemperatureC.ToString();
        tempF = forecast.TemperatureF.ToString();
        summ = forecast.Summary;
        index = row;
        ToggleModal();
    }

    private void ToggleModal()
    {
        open = !open;
        StateHasChanged();
    }

    private void Close()
    {
        modalType = false;
        open = !open;
        StateHasChanged();
    }
}
